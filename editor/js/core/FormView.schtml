<%@ import sc.lang.java.ModelUtil;
    import sc.lang.java.BodyTypeDeclaration;
    import sc.lang.InstanceWrapper; %>
<div>
   <%! 
      visible :=: viewVisible;
   %>

   <div id="ClassView" class="classView" abstract="true">
      <%! 
         BodyTypeDeclaration type; 
         ClientTypeDeclaration clientType := ModelUtil.getClientTypeDeclaration(type);;
         UIIcon icon := type == null ? null : GlobalResources.lookupUIIcon(type);
         type =: updateInstance(null);
         Object instance = null; 
         Object oldInstance = null;
         List<InstanceWrapper> instancesOfType := editorModel.ctx.getInstancesOfType(type, 10, true);
         int instSelectedIndex = 0;

         int getInstSelectedIndex(Object inst) {
            int i = 0;
            for (InstanceWrapper wrap:instancesOfType) {
               if (wrap.instance == inst)
                  return i;
               i++;
            }
            // The first instance will always be for null even if instancesOfType is not set yet
            if (inst == null)
               return 0;
            return -1;
         }

         void updateWrapper(InstanceWrapper newWrapper) {
            Object inst;
            if (newWrapper == null)
               inst = null;
            else
               inst = newWrapper.instance;
            updateInstance(inst);
         }

         void updateInstance(Object inst) {
            if (inst == instance)
               return;

            instance = inst;

            if (instance != oldInstance) {
               updateChildren();
               updateListeners();
               oldInstance = instance;
            }
         }

         void updateListeners() {
            Object[] children = DynUtil.getObjChildren(propList_Repeat, null, true);
            if (children == null)
               return;
            for (Object child:children) {
               if (child instanceof propList_Repeat.propList) {
                  propList_Repeat.propList pchild = (propList_Repeat.propList) child;
                  pchild.eview.updateListeners();
                  pchild.cview.updateListeners();
               }
            }
         }

         void updateChildren() {
            Object[] children = DynUtil.getObjChildren(propList_Repeat, null, true);
            if (children == null)
               return;

            for (Object child:children) {
               if (child instanceof propList_Repeat.propList) {
                  propList_Repeat.propList pchild = (propList_Repeat.propList) child;

                  ClassView childCView = pchild.cview;
                  BodyTypeDeclaration childType = childCView.type;
                  if (childType != null && ModelUtil.isObjectType(childType) && !ModelUtil.hasModifier(childType, "static")) {
                     Object childInst = instance == null ? null : DynUtil.getPropertyValue(instance, childType.typeName);
                     childCView.updateInstance(childInst);
                  }
               }
            }
         }
      %>

      <img visible=":= icon != null && type != null" src='= icon == null ? "" : icon.path' alt='= icon == null ? "" : icon.desc'/><img visible=":= clientType != null && !clientType.existsInJSRuntime" src="/images/serverIcon.png" style="position: relative; left: -2px;"/>  <%= (type == null ? "null-type" : clientType.declarationType.name) %> <span class="classLabel"><%= type == null ? "" : clientType.typeName %> </span>

      <select id="selectInstance" class="selectInstance" optionDataSource=":= instancesOfType" selectedIndex="=: updateWrapper(selectedValue)" selectedIndex=":= getInstSelectedIndex(instance)">
         <option><%= optionData %></option>
      </select>

      <div id="ElementView" abstract="true" component="true">
         <%! 
            Object propC; 
            IVariableInitializer varInit := propC instanceof IVariableInitializer ? (IVariableInitializer) propC : null;
            UIIcon icon := propC == null ? null : GlobalResources.lookupUIIcon(propC, ModelUtil.isDynamicType(type));
            String errorText;
            String oldPropName;
            int changeCt = 0;
            Object oldListenerInstance = null;
            public String currentValue := getPropertyStringValue(propC, instance, changeCt);
            // When the currentValue changes update the textField's value... preserve transient changes in the form though.
            currentValue =: textFieldForm.textField.value;

            String getOperatorDisplayStr(Object instance, IVariableInitializer varInit) {
               return instance == null && varInit != null ? (varInit.operatorStr == null ? " = " : varInit.operatorStr) : "";
            }

            String getPropertyNameDisplayStr(Object propC) {
               return propC == null ? "null-property" : ModelUtil.getPropertyName(propC);
            }

            boolean getPropVisible(Object instance, IVariableInitializer varInit) {
               // Hide reverse only bindings when displaying instance since they are not settable
               return varInit != null && (instance == null || !DynUtil.equalObjects(varInit.operatorStr, "=:"));
            }

            private object valueEventListener extends AbstractListener {
               public boolean valueValidated(Object obj, Object prop, Object eventDetail, boolean apply) {
                  changeCt++; // A signal to call getPropertyStringValue again as the value has changed.
                  return true;
               }
            }

            // Using these values as parameters so we get change events for them
            String getPropertyStringValue(Object prop, Object instance, int changeCt) {
               if (prop == null)
                  return "";
               if (prop instanceof IVariableInitializer) {
                  IVariableInitializer varInit = (IVariableInitializer) prop;

                  if (instance == null)
                     return varInit.initializerExprStr == null ? "" : varInit.initializerExprStr; 
                  else {
                     Object val = DynUtil.getPropertyValue(instance, varInit.variableName);
                     if (val == null)
                        return "";
                     return val.toString();
                  }
               }
               return ModelUtil.getPropertyName(prop);
            }

            /** Because this tag has component="true", it can override the component's stop method to remove the listener */
            void stop() {
               propC = null;
               instance = null;
               updateListeners();
            }

            void updateListeners() {
               String propName = varInit == null ? null : varInit.variableName;
               String simpleProp;

               if (propName != null) {
                  int ix = propName.indexOf("[");
                  if (ix == -1)
                     simpleProp = propName;
                  else
                     simpleProp = propName.substring(0, ix);
               }
               else
                  simpleProp = propName;

               if (oldListenerInstance == instance && propName == oldPropName)
                  return;

               if (oldPropName != null && !oldPropName.equals("<null>")) {
                  if (oldListenerInstance != null) {
                     Bind.removeDynamicListener(oldListenerInstance, type, simpleProp, valueEventListener, IListener.VALUE_CHANGED);
                     oldListenerInstance = null;
                  }
               }

               if (propName != null && !propName.equals("<null>")) {
                  if (instance != null) {
                     Bind.addDynamicListener(instance, type, simpleProp, valueEventListener, IListener.VALUE_CHANGED);
                     oldListenerInstance = instance;
                  }
               }
               oldPropName = propName;
            }
          %>
          <form id="textFieldForm" submitEvent="=: errorText = editorModel.setElementValue(type, instance, propC, textField.value, updateInstances, instance == null)" style="display:inline">
             <label for="= textField.id" class="formFieldLabel">
                <img visible=":= icon != null" src=':= icon == null ? "" : icon.path' alt=':= icon == null ? "" : icon.desc'>
                <%= getPropertyNameDisplayStr(propC) %> <%= getOperatorDisplayStr(instance, varInit) %>&nbsp;</label>
             <input id="textField" class="textField" type="text" focusEvent="=: editorModel.currentProperty = propC">
             <div visible=":= TextUtil.length(errorText) > 0" class="errorText"><%= errorText %></div>
          </form>
       </div>

       <div id="propList" repeat=":= editorModel.getPropertiesForType(type)" repeatVarName="propObj">
          <%! boolean isProperty := ModelUtil.isProperty(propObj); %>
          <div id="eview" visible=":= isProperty && getPropVisible(instance, varInit)" extends="ElementView" propC=":= isProperty ? propObj : null" class="propView"/>
          <div id="cview" visible=":= !isProperty" extends="ClassView" type=":= !isProperty ? (BodyTypeDeclaration) propObj : null" class="classView"/>
      </div>
   </div>

   <div id="formScroll" style="height: 100%; width: 100%; overflow: auto;">
      <div id="formList" repeat=":= editorModel.visibleTypes" repeatVarName="typeObj">
         <div id="formListChild"  extends="ClassView" type=":= (BodyTypeDeclaration) typeObj"/>
      </div>
   </div>

</div>
