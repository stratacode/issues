/**
 * A panel which lists all the existing questions for a given quiz.
 * Each individual question can be selected for editing.  New
 * questions can be added, and existing questions can be deleted, by
 * means of a context menu.
 */
public class QuestionList extends JPanel {
   // A border around the list of questions
   static Border questionListBorder = BorderFactory.createCompoundBorder
      (BorderFactory.createEmptyBorder(0, 5, 5, 5), BorderFactory.createTitledBorder("Questions"));

   border = questionListBorder;
   Insets panelInsets := insets;

   // State shared by all the panels
   QuizDataManager dataManager;
   MakeQuizState state;

   // Get the quiz object for the given quiz name
   Quiz quiz := dataManager.findQuiz(state.quizName);

   // A popup menu with menu items to add a new question and delete an
   // existing question
   object questionPopupMenu extends JPopupMenu implements ActionListener {
      object addQuestionMenuItem extends JMenuItem {
	 text = "Add question";
	 visible := (state.quizName != null);
	 { addActionListener(questionPopupMenu); }
      }
      object deleteQuestionMenuItem extends JMenuItem {
	 text := "Delete question " + (state.questionIndex + 1);
	 visible := ((state.questionIndex != -1) && !state.newQuestionEdit);
	 { addActionListener(questionPopupMenu); }
      }
      
      void actionPerformed(ActionEvent event) {
	 JMenuItem menuItem = (JMenuItem) event.source;
      }
   }

   // Listens for mouse events and brings up the popup menu when
   // necessary
   object popupListener extends PopupMenuListener {
      popupMenu = questionPopupMenu;
   }

   // A scroll pane with a list of all questions for this quiz
   object questionListPane extends JScrollPane {
      location := SwingUtil.point(panelInsets.left, panelInsets.top);
      size := SwingUtil.subInsets(QuestionList.this.size, panelInsets);
      viewportView = questionTextList;

      object questionTextList extends JList {
	 listItems := quiz.questions;
	 selectionMode = ListSelectionModel.SINGLE_SELECTION;
	 selectedIndex :=: state.questionIndex;
	 { addMouseListener(popupListener); }
      }
   }
}
