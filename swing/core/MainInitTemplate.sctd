/** 
 * Main snippet.  Adds component semantics and initializes children for easy bootstrapping
 */
<%
  // Get the global list of type members, turn them into object definitions automatically
  sc.layer.LayeredSystem system = sc.layer.LayeredSystem.getCurrent();
  // Use current build layer's buildInfo, so we don't end up referring to types which have not been defined yet when we are building a base layer
  sc.layer.BuildInfo bi = system.currentBuildLayer.buildInfo;
  java.util.List<sc.layer.TypeGroupMember> mainInitMembers = bi.getTypeGroupMembers("mainInit");
%>
<% if (!overrideField && !overrideGet) { %>
   <%=fieldModifiers%> <%=variableTypeName%> <%=lowerClassName%>;
<% } %>
<%=getModifiers%> <%=variableTypeName%> get<%=upperClassName%>(boolean doInit) {
<% if (overrideGet) { %>
   <%=variableTypeName%> <%=lowerClassName%> = (<%=variableTypeName%>) super.get<%=upperClassName%>();\
<% } %>
   if (<%=lowerClassName%> == null) {
      <%=lowerClassName%> = <% if (typeIsCompiledComponent) { %><%=typeClassName%>.new<%=typeBaseName%>(false)<% } else { %>new <%=typeName%>()<% } %>;
<% if (overrideGet) { %>
      set<%=upperClassName%>(<%=lowerClassName%>);
<% } %>
     <%=lowerClassName%>.preInit();
     <%=getDynamicTypeDefinition(lowerClassName, 2)%><%=propertyAssignments%>
     Object[] _children = new Object[] {<%=childrenNames%>};
     if (doInit) {
       <%=lowerClassName%>.init();
       <%=lowerClassName%>.start();
     }
     return <%=returnCast%><%=lowerClassName%>;
  }
  else return <%=returnCast%><%=lowerClassName%>;
}
<%=getModifiers%> <%=variableTypeName%> get<%=upperClassName%>() { 
   boolean _doInit = <%=lowerClassName%> == null; 
   <%= variableTypeName%> _mainObj = get<%=upperClassName%>(true); 
   // This is here so that if it is a component, we do not call the getX(false) method.  Alternatively, we'd need to find a way to init/start it if we wanted it staged with other init components
   if (_doInit) { // Only do this the first time in case any initializers below need to reference the Main object
     <% for (sc.layer.TypeGroupMember mi:mainInitMembers) {
           if (!mi.isObjectType()) {
              String objName = (String)mi.getAnnotationValue("sc.swing.MainInit", "name");
              if (sc.util.StringUtil.isEmpty(objName))
                 objName = mi.typeName.replace('.','_');
              objName = sc.type.CTypeUtil.capitalizePropertyName(objName); %>
              <%=lowerClassName%>.get<%=objName %>(); 
     <%    }
           else { %>
             <%= mi.typeName %>;
     <%    }
    } %>
   }
   return _mainObj;
}

<%
   for (sc.layer.TypeGroupMember mi:mainInitMembers) {
      if (!mi.isObjectType()) {
         String objName = (String)mi.getAnnotationValue("sc.swing.MainInit", "name");
         if (sc.util.StringUtil.isEmpty(objName))
            objName = mi.typeName.replace('.','_');
         objName = sc.type.CTypeUtil.capitalizePropertyName(objName);
        %>
        public object <%=objName %> extends <%=mi.typeName%> {
        }
<% } } %>

