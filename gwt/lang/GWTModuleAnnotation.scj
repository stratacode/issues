import sc.lang.DefaultAnnotationProcessor;
import sc.lang.ILanguageModel;
import sc.lang.java.Definition;
import sc.lang.java.Annotation;
import sc.lang.java.BodyTypeDeclaration;
import sc.lang.java.TypeDeclaration;
import sc.lang.java.ExecutionContext;
import sc.lang.java.ModelUtil;
import sc.lang.template.Template;
import sc.layer.LayeredSystem;
import sc.util.StringUtil;
import sc.util.FileUtil;
import sc.type.CTypeUtil;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Set;
import java.util.Collection;
import java.util.LinkedHashSet;

// In the transform method, we generate the .xml file by evaluating a template with the annotation as "this"
public class GWTModuleAnnotation extends DefaultAnnotationProcessor {

   public static final String DEFAULT_MODULE_TEMPLATE = "sc.gwt.ModuleTemplate";

   public static class GWTModuleInfo {
      public Collection<String> inherits;
      public Collection<String> entryPoints;
      public Collection<String> sourceFiles;
      public String moduleName;
   }

   Template template;

   public void start(Definition def, Annotation annot) {
      super.start(def, annot);

      String moduleClassName = ModelUtil.getClassName(def);

      if (!(def instanceof TypeDeclaration)) {
         def.displayError("GWTModule annotation must be set on class only: ", def.toString());
         return;
      }

      TypeDeclaration gwtModuleType = (TypeDeclaration) def;
      if (gwtModuleType.getEnclosingType() != null) {
         def.displayError("GWTModule annotation must be set on top-level class  only: ", def.toString());
         return;
      }
      String typeName = gwtModuleType.getFullTypeName();

      LayeredSystem sys = def.getLayeredSystem();

      // If there's a .gwt.xml file with the same name in the same package, do not generate
      if (sys.getSrcFileFromTypeName(typeName, true, null, true, "gwt.xml") != null) 
         return;

      // Next look for ModuleName.gt.ckxml and use that as the template
      template = sys.getTemplate(typeName, "gwt.ckxml", GWTModuleInfo.class, null, null, true);
      if (template == null) {
         // Default to the default dynamic template
         template = sys.getTemplate(DEFAULT_MODULE_TEMPLATE, null, GWTModuleInfo.class, null, null, true);
      }
   }

   public boolean transform(Definition def, Annotation annot, ILanguageModel.RuntimeType type) {
      if (template != null) {
         GWTModuleInfo module = new GWTModuleInfo();
         String inheritsStr = (String) annot.getAnnotationValue("inherits");
         if (inheritsStr != null && inheritsStr.length() > 0) {
            module.inherits = new ArrayList(Arrays.asList(StringUtil.split(inheritsStr, ",")));
         }
         else {
            module.inherits = new ArrayList(1);

            // Some default inherits if none are specified 
            module.inherits.add("com.google.gwt.user.User");
            module.inherits.add("com.google.gwt.user.theme.standard.Standard");
         }

         String entryPointsStr = (String) annot.getAnnotationValue("entryPoints");
         if (entryPointsStr != null && entryPointsStr.length() > 0) 
            module.entryPoints = new ArrayList(Arrays.asList(StringUtil.split(entryPointsStr, ",")));
         else
            module.entryPoints = new ArrayList(1);

         TypeDeclaration gwtModuleType = (TypeDeclaration) def;
         String typeName = gwtModuleType.getFullTypeName();
         module.entryPoints.add(typeName);
         // Get the list of types: src-only, compiled-only
         module.sourceFiles = getDependentSrcFiles(gwtModuleType, annot);

         module.moduleName = getModuleName(def, annot);

         ExecutionContext ctx = new ExecutionContext();
         ctx.pushCurrentObject(module);

         // Use the default module template to evalute the contents of the new file using this
         // GWTModule structure

         try {
            Object out = template.eval(String.class, ctx);

            // During getProcessedFile, when we know the buildSrcDir, the relFileName and template body will get
            // written to the file system. 
            gwtModuleType.getJavaModel().addExtraFile(FileUtil.addExtension(typeName.replace(".", FileUtil.FILE_SEPARATOR), "gwt.xml"), out.toString());
         }
         catch (Exception exc) {
            def.displayError("Exception evaluating gwt module template: " + exc.toString());
            exc.printStackTrace();
         }
         return true;
     }
     return false;
   }

   private  String getModuleName(Definition def, Annotation annot) {
      String moduleNameStr = (String) annot.getAnnotationValue("name");
      if (moduleNameStr == null || moduleNameStr.length() == 0)
         moduleNameStr = ModelUtil.getClassName(def);
      return moduleNameStr;
   }

   private Set<String> getDependentSrcFiles(TypeDeclaration gwtModuleType, Annotation annot) {
      Set<String> depSrcFiles = new LinkedHashSet<String>();
      HashSet<BodyTypeDeclaration> visited = new HashSet<BodyTypeDeclaration>();
      String sourceFilesStr = (String) annot.getAnnotationValue("sourceFiles");

      // Add any manually specified patterns as well
      if (sourceFilesStr != null && sourceFilesStr.length() > 0) 
         depSrcFiles.addAll(Arrays.asList(StringUtil.split(sourceFilesStr, ",")));

      addDependentSrcFiles(gwtModuleType, depSrcFiles, visited);

      return depSrcFiles;
   }

   private void addDependentSrcFiles(BodyTypeDeclaration gwtModuleType, Set<String> depSrcFiles, Set<BodyTypeDeclaration> visited) {
      if (visited.contains(gwtModuleType))
         return;

      visited.add(gwtModuleType);

      Set<Object> depTypes = gwtModuleType.getDependentTypes();
      String modulePackage = CTypeUtil.getPackageName(gwtModuleType.getFullTypeName());
      for (Object depType:depTypes) {
         if (depType instanceof BodyTypeDeclaration) {
            BodyTypeDeclaration srcType = (BodyTypeDeclaration) depType;

            // Skip inner types since they'll be in the file with the main type
            if (srcType.getEnclosingType() != null)
               continue;

            String srcTypeName = srcType.getFullTypeName();

            boolean noModule = StringUtil.isEmpty(modulePackage);

            // TODO: Not sure how we manage dependencies to packages outside of the module's package hierarchy.
            // will relative names ../../foo/client/Client.java work in the module's def file?
            if (noModule || srcTypeName.startsWith(modulePackage)) {
               String relName = noModule ? srcTypeName : srcTypeName.substring(modulePackage.length() + 1);
               depSrcFiles.add(FileUtil.addExtension(relName.replace(".", FileUtil.FILE_SEPARATOR), "java"));

               // No recursively include any dependencies from this type
               addDependentSrcFiles(srcType, depSrcFiles, visited);
            }
         }
      }
   }
}
