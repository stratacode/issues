<html extends="DocPage">
<head title="StrataCode Documentation"/>

<body>
   <div id="content">
       <div id="pageContent" style="height: 450px">
           Browse this overview or select a document on the left:
           <p>
           <div id="docOverview">
              <%! Capsule.CapsuleContent currentContent; %>
              <div id="Capsule" abstract="true" class=':= "capsule" + (capsuleExpanded ? " capsuleExpanded" : " capsuleSmall")'
                   visible=":= currentContent == null || capsuleExpanded">
                 <%! boolean capsuleExpanded := currentContent != null && currentContent.parentCapsule == this; %>
                 <!-- Using display:none here not visible because we need the exec='server' tag below to render on the server... if it's invisible, it's not in the initial page load and the client can't display it. -->
                 <div id="CapsuleContent" abstract="true" class="capsuleContent" style=':= currentContent == this ? "" : "display:none" '>
                    <%! Capsule parentCapsule = Capsule.this; %>
                 </div>

                 <div id="capsuleTitle" class="capsuleTitle">
                    <span class="closeCapsule" id="closeCapsule" clickEvent="=: currentContent = null" visible=":= capsuleExpanded">X</span>
                 </div>

                 <li id="CapsuleMenuItem" abstract="true" class=':= currentContent == menuContent ? "capsuleMenuItem capsuleMenuItemSelected" : "capsuleMenuItem"'
                     clickEvent="=: currentContent = menuContent">
                    <%! Capsule.CapsuleContent menuContent; %>
                 </li>

              </div>

              <div id="javaAdditions" extends="Capsule">
                  <div id="capsuleTitle">Java Additions</div>
                  <div id="javaCapsuleMenu" class="capsuleMenu">
                      <ul id="javaMenuList">
                          <li id="objectMenu" menuContent="= objectContent" extends="CapsuleMenuItem">object</li>
                          <li id="dataBindingMenu" menuContent="= dataBindingContent" extends="CapsuleMenuItem">Data Binding := =: :=:</li>
                          <li id="annotMenu" menuContent="= annotContent" extends="CapsuleMenuItem">Annotations</li>
                          <li id="multiMenu" menuContent="= multiContent" extends="CapsuleMenuItem">Multiple Inheritance</li>
                          <!-- <li id="overrideMenu" menuContent="= overrideContent" extends="CapsuleMenuItem">override</li> -->
                      </ul>
                  </div>  
                  <div id="objectContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">object</div>
                     <p/>
                     <pre class="qcode">
object Person {
   String firstName;
}</pre>
                     <ul>
                        <li>Use the object operator like 'class' to create both a type and an instance.</li>
                        <li>Generated code defines getPerson() and a class if needed.</li>
                        <li>Inner objects are read-only properties of the enclosing object</li>
                        <li>Initialize a recursive graph of objects using @Component</li>
                        <li>Use the scope keyword to control the lifecycle of the instance (e.g. scope&lt;session&gt;, scope&lt;window&gt;, scope&lt;global&gt;)</li>
                        <li>(<a href="components.html">more</a>)</li>
                     </ul>
                  </div>
                  <div id="dataBindingContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Data Binding</div>
                     <p/>
                     <pre class="qcode">
Person {
   String fullName := firstName + " " + lastName;
   String name :=: fullName;
   name =: System.out.println("New name: " + name);
}</pre>
                     <ul>
                       <li>x := y;  Defines a forward binding.  x, a property, is set when y, a java expression's value changes.</li>
                       <li>x :=: y;  Defines a bi-directional binding.  x is set when y changes and y is set when x changes.  y must be an invertible Java expression, (i.e. 7 * z works but w * z gives an error).</li>
                       <li>x =: y; Defines a reverse-only binding.  when x is set, y is set or evaluated.</li>
                       <li>(<a href="dataBinding.html">more</a>, <a extends="PackageLink" packageName="sc/bind"/>)</li>
                     </ul>
                  </div>
                  <div id="annotContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Annotations</div>
                     <ul>
                        <li>@Bindable - make a property bindable via code injection.  For manual=true the property is treated as bindable without code generation. (<a extends="ClassLink" className="sc/bind/Bindable"/>)</li>
                        <li>@Component - enable component initialization, multi-pass etc. (<a extends="ClassLink" className="sc/obj/Component"/>)</li>
                        <li>@MainSettings - configure a 'main' method (<a extends="ClassLink" className="sc/obj/MainSettings"/>)</li>
                        <li>@CompilerSettings - framework hooks (<a extends="ClassLink" className="sc/obj/CompilerSettings"/>)</li>
                        <li>@Constant - mark a property as unchanging - no need for data binding when you can't use final.. (<a extends="ClassLink" className="sc/obj/Constant"/>)
                        </li>
                        <li>@GetSet - enable/configure get/set generation for a property. (<a extends="ClassLink" className="sc/obj/GetSet"/>)</li>
                     </ul>
                  </div>
                  <div id="overrideContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">override</div>
                     <p>
                     Used to set annotations on a property, or just add a property to a layer when you are not also updating it's value.  For example:  "override foo;"  will just add the property foo to the current layer for the current type.   Or override '@Bindable foo;' will add it to the current layer and add the @Bindable annotation.
                  </div>
                  <div id="multiContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Multiple Inheritance</div>
                     <p/>
                     <pre class="qcode">
// inherit fields
interface Style {
   Color foreground; 
}

// inherit property assignments
interface RedStyle extends Style {
   foreground = Color.RED;
}</pre>
                     Put non-static fields in interfaces so they are inherited by all implementing classes.  get/set methods are generated and used.  Use property assignments in interfaces to copy those changes to all implementing classes.
                  </div>

              </div>

              <div id="fileTypes" extends="Capsule">
                  <div id="capsuleTitle">File Types</div>
                  <div id="fileCapsuleMenu" class="capsuleMenu">
                      <ul id="fileMenuList">
                          <li id="scFileMenu" menuContent="= scFileContent" extends="CapsuleMenuItem">.sc</li>
                          <li id="schtmlFileMenu" menuContent="= schtmlFileContent" extends="CapsuleMenuItem">.schtml</li>
                          <li id="scssFileMenu" menuContent="= scssFileContent" extends="CapsuleMenuItem">.scss</li>
                          <li id="sctFileMenu" menuContent="= sctFileContent" extends="CapsuleMenuItem">.sct</li>
                          <!-- <li id="sctdFileMenu" menuContent="= sctdFileContent" extends="CapsuleMenuItem">.sctd</li> -->
                      </ul>
                  </div>
                  <div id="scFileContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">.sc Files</div>
                     <pre class="qcode">
object HelloWorld {
   String message = "Welcome to StrataCode";
}</pre>
                     The .sc suffix is used for StrataCode files, a superset of Java including layers, data binding, and more.
                     It will usually work like Java but there are some <a href="javaCompat.html">differences</a>.  Mix sc and java files on a file by file and layer by layer.
                  </div>
                  <div id="schtmlFileContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">.schtml Files</div>
                     <pre class="qcode">
&lt;html&gt;
  &lt;body&gt;
     &lt;%! String yourName = ""; %&gt;
     &lt;input type="text" value=":=: yourName"&gt;
     Hello &lt;%= yourName %&gt;!
  &lt;/body&gt;
&lt;/html&gt;</pre>
                     The .schtml files mix HTML and Java to convert tags into StrataCode objects.  Tags can extend other templates or tags and the bodies of the inherited template can be merged in different ways - append, replace, merge using order rules, etc.  Templates can embed Java using JSP-like syntax tags - &lt;%, &lt;%=, &lt;%!, and &lt;%@ (<a href="webFramework.html">more</a>), (<a extends="PackageLink" packageName="sc/lang/html"/>).
                  </div>
                  <div id="scssFileContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">.scss Files</div>
                     <pre class="qcode">
.body {
   width: &lt;%= Window.window.innerWidth %&gt;px;
}</pre>
                     The .scss files use template language operators to generate CSS.  You can control whether the CSS is generated at build time, server-load time, and/or updated dynamically on the client when values change.
                  </div>
                  <div id="sctFileContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">.sct Files</div>
                     <pre class="qcode">
&lt;%! // switch to code
object TemplateString {
   String message = %&gt; Now we are 
in a "template string".
&lt;% ; // switch back to code 
} %&gt;</pre>
                     When your .sc file needs to embed large regions of text strings, you can rename it to .sct.  Then use the JSP-like language operators to switch back and forth between code and template strings.  A template string can be used in place of any String expression in Java. (<a href="templateLang.html">more</a>)
                  </div>
                  <div id="sctdFileContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">.sctd Files</div>
                     <p>Framework developers can customize the generated code for various patterns by plugging in their own code-templates.  These code templates can either be interpreted or compiled. </p>
                  </div>
              </div>
              
              <div id="tools" extends="Capsule">
                  <div id="capsuleTitle">Tools</div>
                  <div id="toolMenu" class="capsuleMenu">
                      <ul id="toolMenuList">
                          <li id="scCmdMenu" menuContent="= scCmdContent" extends="CapsuleMenuItem">sc command</li>
                          <li id="scProgEdMenu" menuContent="= scProgEdContent" extends="CapsuleMenuItem">Program editor</li>
                          <li id="scCmdlineMenu" menuContent="= scCmdlineContent" extends="CapsuleMenuItem">Command line</li>
                      </ul>
                  </div>
                  <div id="scCmdContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">sc command</div>
                     <p/>
                     <pre class="qcode">
% sc editor/js/mixin example/unitConverter/jsui
</pre>
                     The sc command is a build, run, refresh, restart tool all in one.  You supply the list of layers and it compiles, and runs
                     the resulting application and can refresh, and restart itself as needed to update based on code you change.  The last layer in the chain of the ones you supply is designated the build layer and it's often wise to designate a special layer for that purpose.  The results go into that layer's build or dynbuild directories depending on whether that layer is
                     compiled or dynamic. (<a href="runtime.html">more</a>)
                  </div>
                  <div id="scProgEdContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Program editor</div>
                     <p> Include the program editor layers to run it alongside your application.  For swing:
                      editor/swing/main and for the web framework include editor/js/mixin.</p>
                  </div>
                  <div id="scCmdlineContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Command line</div>
                     <p> Fully scriptable, extensible command-line based on Java but interpreted.  Commands to move up and down the layer stack to set your context.  Command completion of type names and expressions, create layers, add and remove layers, record property changes for replay, list and print the current type and select a current instance.  Evaluate expressions, add fields, set properties, add or override methods.</p>
                  </div>
              </div>
              
              <div id="layers" extends="Capsule">
                  <div id="capsuleTitle">Layers</div>
                  <div id="layersMenu" class="capsuleMenu">
                      <ul id="layerMenuList">
                          <li id="aboutLayerMenu" menuContent="= aboutLayerContent" extends="CapsuleMenuItem">About</li>
                          <li id="newLayerMenu" menuContent="= newLayerContent" extends="CapsuleMenuItem">Adding New Layers</li>
                          <li id="frameworkLayerMenu" menuContent="= frameworkLayerContent" extends="CapsuleMenuItem">Framework Layers</li>
                      </ul>
                  </div>    
                  <div id="aboutLayerContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">About layers</div>
                     <p>Layers organize code by merging name-spaces like the classpath in Java but where you also can modify a type  using the same rules as inheritance.  Layers can only depend on layers they extend which preserves modularity even in large, complex systems. (<a href="modify.html">more</a>)</p>
                  </div>
                  <div id="frameworkLayerContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Framework Layers</div>
                     <p>Framework layers are like regular layers but control the code-generation features to help automate complex application development and deployment.  In general, framework dependencies are minimized in application code letting you reuse that code more.  Key framework layers: jetty.schtml, js.schtml, swing.core, android.core, wicket.core, junit.main, jpa.openjpa, jpa.hibernate, opengl/main, gwt.main. </p>
                  </div>
                  <div id="newLayerContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Adding New Layers</div>
                     <p/>
<pre class="qcode">
// layer extends baseLayer
foo extends bar {
   // ... layer properties here
   void init() { //... init code ...  }
   void start() { //... start code ...  }
}</pre>
                     You define a new layer by adding a new directory in the layer path, then creating a StrataCode layer definition file in that directory: directoryName.sc e.g. the layer foo is defined by the file: foo/foo.sc.  The layer definition file is interpreted when the system starts and acts like the build script.   Layers are initialized in two passes and can update and modify properties from previous layers in each pass. Unlike most build systems, you copy much less config into your project, you extend the layer and customize it only in framework layers or for special circumstances. (<a href="layerDefinition.html">more</a>)
                  </div>
              </div>
              
              <div id="frameworks" extends="Capsule">
                  <div id="capsuleTitle">Frameworks</div>
                  <div id="frameworksMenu" class="capsuleMenu">
                      <ul id="frameworksList">
                          <li id="webMenu" menuContent="= webContent" extends="CapsuleMenuItem">Web</li>
                          <li id="androidMenu" menuContent="= androidContent" extends="CapsuleMenuItem">Android</li>
                          <li id="junitMenu" menuContent="= junitContent" extends="CapsuleMenuItem">JUnit</li>
                          <li id="jettyMenu" menuContent="= jettyContent" extends="CapsuleMenuItem">Jetty</li>
                      </ul>
                  </div>
                  <div id="webContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Web Framework</div>
                     <p>
                     The StrataCode web framework adds a Java to Javascript converter, the schtml template language and the tag object API.  Client-only, server-only, or isomorphic client/server operation with no explicit RPC code. (<a href="webFramework.html">more</a>)
                     </p>
                  </div>
                  <div id="jettyContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Jetty</div>
                     <p>
                     <!--
                     <div id="jettyExampCode" exec="server">
                     <%= sc.lang.SCLanguage.INSTANCE.styleFileNoTypeErrors("jetty/examp","examp.sc", true) %>
                     </div> -->
                     <pre class="qcode">
CServer {
   httpConnector {
      port = 8080;
   }
   handlerList {
      webAppHandler {
         contextPath = "/";
         war="./web";
      }
   }
}</pre>
                     Fully customizable Jetty deployment with StrataCode. (<a href="moreFrameworks.html">more</a>)
                     </p>
                  </div>
                  <div id="androidContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Android</div>
                     <pre class="qcode">
UnitConverter extends Activity {
   ...
   object unit1 extends LinearLayout {
      object unit1Label extends UnitLabel {
         textString := currentConverter.unit1;
      }
      object unit1Field extends UnitTextField {
         textString :=: 
            numberConverter.numberToString(currentConverter.value1);
      }
   }
   ...
}</pre>
                     <p>
                     Supports data binding for android framework classes, automatic project build and deploy (<a href="gettingStartedAndroid.html">more</a>)
                     </p>
                  </div>
                  <div id="junitContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">JUnit</div>
                     <pre class="qcode">
@Test void unitTest() {...}</pre>
                     <p>
                     Tag test methods with annotations, run all tests in a stack of layers.
                     </p>
                  </div>
              </div>
              
              <div id="synchronization" extends="Capsule">
                  <div id="capsuleTitle">Synchronization</div>
                  <div id="syncMenu" class="capsuleMenu">
                      <ul id="syncMenuList">
                         <li id="aboutSyncMenu" menuContent="= aboutSyncContent" extends="CapsuleMenuItem">About</li>
                         <li id="customSyncMenu" menuContent="= customSyncContent" extends="CapsuleMenuItem">Customizing</li>
                         <li id="debugSyncMenu" menuContent="= debugSyncContent" extends="CapsuleMenuItem">Debugging</li>
                      </ul>
                  </div>
                  <div id="aboutSyncContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">About Sync</div>
                     <p>
                     StrataCode sync uses data binding events, an addSyncType call to register sync metadata, and an addSyncInst call to do explicit synchronization.  Use @Sync or automatically sync overlapping layers and all events, and addSync calls are injected automatically.  Sync records changes and sends them over the wire from client to server and vice versa.  (<a href="syncFramework.html">more</a>)
                     </p>
                  </div>
                  <div id="customSyncContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Customizing Sync</div>
                     <p>
                     Use @Sync(onDemand=true) - sync begins either when first referenced by another synchronized object or you call 
                     SyncManager.startSync(Object instance, String propName).  Turn off sync with @Sync(syncMode=SyncMode.Disabled), 
                     Turn on sync with @Sync(syncMode=SyncMode.Enabled).
                     </p>
                     <p>
                     Control the default sync for the layer with Layer.defaultSyncMode = SyncMode.Automatic, Enabled or Disabled.
                     </p>
                  </div>
                  <div id="debugSyncContent" extends="CapsuleContent">
                     <div class="capsuleContentTitle">Debugging Sync</div>
                     <p>
                     Turn on -vs, -vsa or 'Trace Sync' in the program editor to trace the client/server traffic.  The client sends StrataCode layer code across the wire.  The server compiles its StrataCode layer to Javascript for faster evaluation in the browser.  Layers are more readable than JSON or Javascript.  Set breakpoints in your generated getX and setX methods or the generated JS. 
                     </p>
                  </div>
              </div>
           </div>
           <div id="browseAPI">
           Browse the <a href="javadoc/">api</a> doc.
           </div>
       </div>
   </div>
</body>

</html>
