<html extends="ArticlePage">
<head title="Configuration and Component Assembly"/>

<body>
   <div id="content">
       <div id="pageContent" exec="server">

<%= MarkDownPage.markDown(%>

## Configuration and Component Assembly

Dependency injection, or inversion of control, the pattern used by frameworks like Spring, separates class definition in Java code from the code which assembles these classes.  This lets you reuse those classes in other contexts, test environments or different application configurations.  This pattern has been widely adopted by Java enterprise systems  but has limitations.  

For each property, you must choose between initializing it in Java, annotations, or XML.  Separating initialization from the code is more complex and harder to maintain.  Not separating it causes pain down the road and moving from one to the other takes real effort.  For example, QA benefits from much deeper access to code than other stakeholders but frequently the Java code only defines one interface used by both types of markup.

Dependency injection may create hidden connections between components that are difficult to trace without a global search through every class in your application.  For example, matching an interface to some implementation of that interface as in EJB3.  Other systems like Spring avoid this with explicit connections but that requires a separate name space - class names and markup ids, effectively doubling the number of public interfaces in your system.

All of these frameworks add runtime overhead by parsing XML or scanning for annotations at startup.  When systems are large, this overhead becomes substantial.  They often detect configuration errors at startup time, or worse the first time a component is accessed.

When you use XML for assembly, you lose language features like inheritance.  Instead you copy large quantities of configuration which then must be managed independently.

StrataCode provides the benefits of these frameworks without their limitations.  Independent classes are defined for isolation.  You can either modify those classes in a separate layer or create objects which then assign the values of those properties.  You are not forced to create a new name for the instance versus the class and are not forced to leave the language to separate implementation from assembly.

One name space for both objects and classes, and one way to make connections between objects - field references.  This simplifies the code by using one syntax.  You add layers at natural boundaries and if those boundaries change you can merge or split layers without affecting your application.  You assemble objects in a component-style manner using standard field initializers without changing code.  StrataCode supports both Java's tree-based initialization or lets a framework enable a more flexible graph based initialization using the @Component annotation. 

Layers separate initialization from type definition, allowing you to inject dependencies in another layer when it is natural to do so in a design.  And if you change your mind, just refactor by merging or creating a new layer.  You can compile a layer for runtime speed.  To assemble components dynamically the code is the same - just add the dynamic keyword on the layer definition.  With layers, references are traceable - you know which layers are involved, and for each layer it is quick to see which types it defines/modifies. 

Let's compare Guice, the most concise and powerful of these frameworks to StrataCode:

Here's an [example](http://code.google.com/p/google-guice/wiki/Motivation?tm=6) from the Guice docs:

<%= sc.lang.SCLanguage.INSTANCE.styleNoTypeErrors(
%>public class BillingModule extends AbstractModule {
  @Override 
  protected void configure() {
    bind(TransactionLog.class).to(DatabaseTransactionLog.class);
    bind(CreditCardProcessor.class).to(PaypalCreditCardProcessor.class);
    bind(BillingService.class).to(RealBillingService.class);
  }
}
<% ) %>

Here the BillingModule's class which binds interfaces to implementation classes.


<%= sc.lang.SCLanguage.INSTANCE.styleNoTypeErrors(
%>public class RealBillingService implements BillingService {
  private final CreditCardProcessor processor;
  private final TransactionLog transactionLog;

  @Inject
  public RealBillingService(CreditCardProcessor processor,
                            TransactionLog transactionLog) {
    this.processor = processor;
    this.transactionLog = transactionLog;
  }

  //...
}
<% ) %>

RealBillingService is a sample Guice service which defines properties typed by implementation classes, using @Inject so Guice sets them automatically.

<%= sc.lang.SCLanguage.INSTANCE.styleSnippetNoTypeErrors(
%>public static void main(String[] args) {
   Injector injector = Guice.createInjector(new BillingModule());
   BillingService billingService = injector.getInstance(BillingService.class);
}
<% ) %>

This code creates the instance of the RealBillingService with the property injections.

In StrataCode, you get the same modularity benefits with just two steps of purely declarative code:

<%= sc.lang.SCLanguage.INSTANCE.styleNoTypeErrors(
%>object BillingService {
   CreditCardProcessor processor;
   TransactionLog transactionLog;
}
<% ) %>

and in another layer:

<%= sc.lang.SCLanguage.INSTANCE.styleNoTypeErrors(
%>BillingService {
   processor = PaypalCreditCardProcessor;
   transactionLog = DatabaseTransactionLog;
}
<% ) %>

Later you decide you need more than one BillingService or need to create instances of it explicitly elsewhere.  You can easily refactor:

<%= sc.lang.SCLanguage.INSTANCE.styleNoTypeErrors(
%>class BillingServiceType {
   CreditCardProcessor processor;
   TransactionLog transactionLog;
}
<% ) %>

<%= sc.lang.SCLanguage.INSTANCE.styleNoTypeErrors(
%>object BillingService extends BillingServiceType {
   processor = PaypalCreditCardProcessor;
   transactionLog = DatabaseTransactionLog;
}
<% ) %>

Upstream, no one knows.  This allows you to freely express singleton intent in your design without extra interfaces and boilerplate.  Your designs become clearer and your code shorter.  You are not forced to over-design for future flexibility since you can add that in a compatible way later as needed.  

The Guice sample requires those separate interfaces (not shown).  The bind, createInjector, and getInstance calls are the tools you use to build an object graph in imperative code, thus difficult to tool.  In the StrataCode sample, objects are constructed declaratively behind the scenes.  With no customization, they are stored as static variables and created the first time they are accessed.  But framework layers can change that with code templates and scopes in the layers you extend.  The frameworks programmers control lifecycle, transactions, lists and grids, session or request scoped components.  Systems are more flexible with minimal application code and a declarative, readable syntax.  

Scopes can make code more robust by enforcing constraints at compile time: so you can prevent global objects from getting a reference to a session scoped component (for example).  Scopes are an extension mechanism - allowing framework developers to create a safe, efficient sandbox for application programmers.  Framework developers use simple code templates to separate allocation and instance lifecycle from the application code.  

<% ) %>
   </div>

   </div>
</body>

</html>

