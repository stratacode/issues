<html extends="DocPage">

<body>

   <div id="content">
       <div id="pageContent" exec="server">

<%= MarkDownPage.markDown(%>

This section describes the core Jetty and Servlet layers that are used in the StrataCode web framework.

## Jetty and Servlets

Jetty is a lightweight servlet engine exposed in StrataCode as a set of layers in the jetty layer group.  To use jetty with servlets, extend the jetty.servlet layer.  There's also a servlet.schtml layer which defines a new extension "schtml" which compiles StrataCode templates into servlets and adds them automatically to web.xml.

See the examples layer called servletHelloWorld:

<% ) %>

<%= sc.lang.SCLanguage.INSTANCE.styleNoTypeErrors( %>
public example.servletHelloWorld extends jetty.servlet, servlet.schtml {

}
<% ) %>

<%= MarkDownPage.markDown(%>

When you extend the jetty.servlet layer, your layer's top level directory can contain web/WEB-INF/web.xml.  When you specify this file, it gets put into your build directory.  When it is not specified, a default one is generated.  This happens because a previous layer defines a web.scxml file - a dynamically generated web.xml.   These files the normal rules for layering: a web.scxml file can override a web.xml file and vice versa.

If you want to add a servlet at a specific path, you can use the @PathServlet annotation on any servlet:

<% ) %>

<%= sc.lang.SCLanguage.INSTANCE.styleFileNoTypeErrors("example/servletHelloWorld","HelloWorld.sc") %>

Or add a schtml file - it will be registered in web.xml using a path based on its generated type name:

<%= sc.lang.TemplateLanguage.INSTANCE.styleFileNoTypeErrors("example/servletHelloWorld","Hello.schtml") %>

<%= MarkDownPage.markDown(%>

In this case, you request the servlet with http://localhost:8080/example/servletHelloWorld.  

Now, in another layer you can extend that layer but change the message property:

<% ) %>

<%= sc.lang.TemplateLanguage.INSTANCE.styleFileNoTypeErrors("example/extendedHelloWorld","Hello.schtml") %>

or do the same thing from a StrataCode file instead of a schtml file:

<%= sc.lang.SCLanguage.INSTANCE.styleFileNoTypeErrors("example/extendedHelloWorld2","Hello.sc") %>

<%= MarkDownPage.markDown(%>

The web.xml file is generated by adding tags for all servlets, servlet filters, and template pages in the application.  When you extend the wicket layer, wicket applications are further inserted into the web.xml file.

This is accomplished by layering of web.scxml files.  First in the servlet/webApp layer, the template language is used to define a structured template matching the web.xml file structure of servlets, servlet-mappings, and servlet-filters, filter-mappings.

<% ) %>

<%= sc.lang.TemplateLanguage.INSTANCE.styleFileNoTypeErrors("servlet/webApp","web/WEB-INF/web.scxml") %>

Wicket needs to add its own servlet filters to the list.  It defines its own template which modifies the web component, overriding the two methods used to add a new servlet filter:

<%= sc.lang.TemplateLanguage.INSTANCE.styleFileNoTypeErrors("wicket/core","web/WEB-INF/web.scxml") %>

<%= MarkDownPage.markDown(%>

The ability to gather a list of all the objects with a specific annotation or that implement a class is built into the StrataCode build system - accessible to template files at build time.  In these templates, you can use various utility libraries to get annotation values, or introspect the types so that this code generation is as informed as necessary.  This is all done in Java by framework developers.  This work helps keep framework details out of application layers.  But since it's using StrataCode code, its easy to use these templates to trace down problems when things go wrong.  All project definition files are also StrataCode so when an annotation or other construct causes an error, you can trace those errors as well.

## Configuring Jetty

When you extend the jetty/serve layer, you get a default Jetty configuration of a CServer component defined as:

<% ) %>

<%= sc.lang.SCLanguage.INSTANCE.styleFileNoTypeErrors("jetty/serve","CServer.sc") %>

To change the port just extend this layer and override the httpConnector.port property:

<%= sc.lang.SCLanguage.INSTANCE.styleFileNoTypeErrors("jetty/examp","CServer.sc") %>

<%= MarkDownPage.markDown(%>

## JUnit

Extend the junit.main layer.  Add the normal @Test annotations for junit.  To run your tests, use:

    sc yourLayer -t "<testClassPattern>"

for example:

    sc test/GetSet -t "sc.*"

or just use -ta to run all tests:

    sc test/GetSet -ta

StrataCode provides facilities to gather all tests registered.  In this case, junit registers itself as a test provider when you include the junit layer.  It's annotation processor for Test accumulates test objects at build time.  This index is used to make running all tests easy - a one step compile and run process.

<% ) %>

     </div>
   </div>
</body>
</html>
